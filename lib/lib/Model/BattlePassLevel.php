<?php
/**
 * BattlePassLevel
 *
 * PHP version 5
 *
 * @category Class
 * @package  SCILL
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SCILL\Model;

use \ArrayAccess;
use \SCILL\ObjectSerializer;

/**
 * BattlePassLevel Class Doc Comment
 *
 * @category Class
 * @package  SCILL
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BattlePassLevel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BattlePassLevel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'level_id' => 'string',
'app_id' => 'string',
'battle_pass_id' => 'string',
'reward_amount' => 'string',
'reward_type_name' => 'string',
'level_reward_type' => 'string',
'level_completed' => 'bool',
'level_priority' => 'float',
'reward_claimed' => 'bool',
'activated_at' => 'string',
'challenges' => '\SCILL\Model\BattlePassLevelChallenge[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'level_id' => null,
'app_id' => null,
'battle_pass_id' => null,
'reward_amount' => null,
'reward_type_name' => null,
'level_reward_type' => null,
'level_completed' => null,
'level_priority' => null,
'reward_claimed' => null,
'activated_at' => null,
'challenges' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'level_id' => 'level_id',
'app_id' => 'app_id',
'battle_pass_id' => 'battle_pass_id',
'reward_amount' => 'reward_amount',
'reward_type_name' => 'reward_type_name',
'level_reward_type' => 'level_reward_type',
'level_completed' => 'level_completed',
'level_priority' => 'level_priority',
'reward_claimed' => 'reward_claimed',
'activated_at' => 'activated_at',
'challenges' => 'challenges'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'level_id' => 'setLevelId',
'app_id' => 'setAppId',
'battle_pass_id' => 'setBattlePassId',
'reward_amount' => 'setRewardAmount',
'reward_type_name' => 'setRewardTypeName',
'level_reward_type' => 'setLevelRewardType',
'level_completed' => 'setLevelCompleted',
'level_priority' => 'setLevelPriority',
'reward_claimed' => 'setRewardClaimed',
'activated_at' => 'setActivatedAt',
'challenges' => 'setChallenges'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'level_id' => 'getLevelId',
'app_id' => 'getAppId',
'battle_pass_id' => 'getBattlePassId',
'reward_amount' => 'getRewardAmount',
'reward_type_name' => 'getRewardTypeName',
'level_reward_type' => 'getLevelRewardType',
'level_completed' => 'getLevelCompleted',
'level_priority' => 'getLevelPriority',
'reward_claimed' => 'getRewardClaimed',
'activated_at' => 'getActivatedAt',
'challenges' => 'getChallenges'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['level_id'] = isset($data['level_id']) ? $data['level_id'] : null;
        $this->container['app_id'] = isset($data['app_id']) ? $data['app_id'] : null;
        $this->container['battle_pass_id'] = isset($data['battle_pass_id']) ? $data['battle_pass_id'] : null;
        $this->container['reward_amount'] = isset($data['reward_amount']) ? $data['reward_amount'] : null;
        $this->container['reward_type_name'] = isset($data['reward_type_name']) ? $data['reward_type_name'] : null;
        $this->container['level_reward_type'] = isset($data['level_reward_type']) ? $data['level_reward_type'] : null;
        $this->container['level_completed'] = isset($data['level_completed']) ? $data['level_completed'] : null;
        $this->container['level_priority'] = isset($data['level_priority']) ? $data['level_priority'] : null;
        $this->container['reward_claimed'] = isset($data['reward_claimed']) ? $data['reward_claimed'] : null;
        $this->container['activated_at'] = isset($data['activated_at']) ? $data['activated_at'] : null;
        $this->container['challenges'] = isset($data['challenges']) ? $data['challenges'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets level_id
     *
     * @return string
     */
    public function getLevelId()
    {
        return $this->container['level_id'];
    }

    /**
     * Sets level_id
     *
     * @param string $level_id Unique id of this BattlePassLevel object.
     *
     * @return $this
     */
    public function setLevelId($level_id)
    {
        $this->container['level_id'] = $level_id;

        return $this;
    }

    /**
     * Gets app_id
     *
     * @return string
     */
    public function getAppId()
    {
        return $this->container['app_id'];
    }

    /**
     * Sets app_id
     *
     * @param string $app_id The app id
     *
     * @return $this
     */
    public function setAppId($app_id)
    {
        $this->container['app_id'] = $app_id;

        return $this;
    }

    /**
     * Gets battle_pass_id
     *
     * @return string
     */
    public function getBattlePassId()
    {
        return $this->container['battle_pass_id'];
    }

    /**
     * Sets battle_pass_id
     *
     * @param string $battle_pass_id The id of the battle pass this level belongs to
     *
     * @return $this
     */
    public function setBattlePassId($battle_pass_id)
    {
        $this->container['battle_pass_id'] = $battle_pass_id;

        return $this;
    }

    /**
     * Gets reward_amount
     *
     * @return string
     */
    public function getRewardAmount()
    {
        return $this->container['reward_amount'];
    }

    /**
     * Sets reward_amount
     *
     * @param string $reward_amount In the Admin Panel you can set different types of rewards. You can also set an identifier of an in-game-item or anything you like. Use this to include the reward into your own business logic.
     *
     * @return $this
     */
    public function setRewardAmount($reward_amount)
    {
        $this->container['reward_amount'] = $reward_amount;

        return $this;
    }

    /**
     * Gets reward_type_name
     *
     * @return string
     */
    public function getRewardTypeName()
    {
        return $this->container['reward_type_name'];
    }

    /**
     * Sets reward_type_name
     *
     * @param string $reward_type_name There are different types of rewards available. Possible values are Coins, Voucher, Money and Experience. This is deprecated in favor of level_reward_type which uses a slug instead of a human readable expression
     *
     * @return $this
     */
    public function setRewardTypeName($reward_type_name)
    {
        $this->container['reward_type_name'] = $reward_type_name;

        return $this;
    }

    /**
     * Gets level_reward_type
     *
     * @return string
     */
    public function getLevelRewardType()
    {
        return $this->container['level_reward_type'];
    }

    /**
     * Sets level_reward_type
     *
     * @param string $level_reward_type The reward type in a machine readable slug. Available values are nothing, coin, experience, item
     *
     * @return $this
     */
    public function setLevelRewardType($level_reward_type)
    {
        $this->container['level_reward_type'] = $level_reward_type;

        return $this;
    }

    /**
     * Gets level_completed
     *
     * @return bool
     */
    public function getLevelCompleted()
    {
        return $this->container['level_completed'];
    }

    /**
     * Sets level_completed
     *
     * @param bool $level_completed Indicates if this level is completed, i.e. all challenges have been completed.
     *
     * @return $this
     */
    public function setLevelCompleted($level_completed)
    {
        $this->container['level_completed'] = $level_completed;

        return $this;
    }

    /**
     * Gets level_priority
     *
     * @return float
     */
    public function getLevelPriority()
    {
        return $this->container['level_priority'];
    }

    /**
     * Sets level_priority
     *
     * @param float $level_priority Indicates the position of the level.
     *
     * @return $this
     */
    public function setLevelPriority($level_priority)
    {
        $this->container['level_priority'] = $level_priority;

        return $this;
    }

    /**
     * Gets reward_claimed
     *
     * @return bool
     */
    public function getRewardClaimed()
    {
        return $this->container['reward_claimed'];
    }

    /**
     * Sets reward_claimed
     *
     * @param bool $reward_claimed Indicates if this level has already be claimed.
     *
     * @return $this
     */
    public function setRewardClaimed($reward_claimed)
    {
        $this->container['reward_claimed'] = $reward_claimed;

        return $this;
    }

    /**
     * Gets activated_at
     *
     * @return string
     */
    public function getActivatedAt()
    {
        return $this->container['activated_at'];
    }

    /**
     * Sets activated_at
     *
     * @param string $activated_at The date when this level has been activated or null if it's not activated.
     *
     * @return $this
     */
    public function setActivatedAt($activated_at)
    {
        $this->container['activated_at'] = $activated_at;

        return $this;
    }

    /**
     * Gets challenges
     *
     * @return \SCILL\Model\BattlePassLevelChallenge[]
     */
    public function getChallenges()
    {
        return $this->container['challenges'];
    }

    /**
     * Sets challenges
     *
     * @param \SCILL\Model\BattlePassLevelChallenge[] $challenges An array of BattlePassLevelChallenge objects. Please note, not all values are available from the challenge object, as battle passes handle the lifecycle of challenges.
     *
     * @return $this
     */
    public function setChallenges($challenges)
    {
        $this->container['challenges'] = $challenges;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
