<?php
/**
 * BattlePassLevelReward
 *
 * PHP version 5
 *
 * @category Class
 * @package  SCILL
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.24
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SCILL\Model;

use \ArrayAccess;
use \SCILL\ObjectSerializer;

/**
 * BattlePassLevelReward Class Doc Comment
 *
 * @category Class
 * @description This objects holds information about a battle pass reward
 * @package  SCILL
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BattlePassLevelReward implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BattlePassLevelReward';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'app_id' => 'string',
'battle_pass_id' => 'string',
'level_id' => 'string',
'user_id' => 'string',
'level_position_index' => 'int',
'reward_amount' => 'string',
'reward_type_name' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'app_id' => null,
'battle_pass_id' => null,
'level_id' => null,
'user_id' => null,
'level_position_index' => null,
'reward_amount' => null,
'reward_type_name' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'app_id' => 'app_id',
'battle_pass_id' => 'battle_pass_id',
'level_id' => 'level_id',
'user_id' => 'user_id',
'level_position_index' => 'level_position_index',
'reward_amount' => 'reward_amount',
'reward_type_name' => 'reward_type_name'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'app_id' => 'setAppId',
'battle_pass_id' => 'setBattlePassId',
'level_id' => 'setLevelId',
'user_id' => 'setUserId',
'level_position_index' => 'setLevelPositionIndex',
'reward_amount' => 'setRewardAmount',
'reward_type_name' => 'setRewardTypeName'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'app_id' => 'getAppId',
'battle_pass_id' => 'getBattlePassId',
'level_id' => 'getLevelId',
'user_id' => 'getUserId',
'level_position_index' => 'getLevelPositionIndex',
'reward_amount' => 'getRewardAmount',
'reward_type_name' => 'getRewardTypeName'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['app_id'] = isset($data['app_id']) ? $data['app_id'] : null;
        $this->container['battle_pass_id'] = isset($data['battle_pass_id']) ? $data['battle_pass_id'] : null;
        $this->container['level_id'] = isset($data['level_id']) ? $data['level_id'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['level_position_index'] = isset($data['level_position_index']) ? $data['level_position_index'] : null;
        $this->container['reward_amount'] = isset($data['reward_amount']) ? $data['reward_amount'] : null;
        $this->container['reward_type_name'] = isset($data['reward_type_name']) ? $data['reward_type_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets app_id
     *
     * @return string
     */
    public function getAppId()
    {
        return $this->container['app_id'];
    }

    /**
     * Sets app_id
     *
     * @param string $app_id The unique id of the app
     *
     * @return $this
     */
    public function setAppId($app_id)
    {
        $this->container['app_id'] = $app_id;

        return $this;
    }

    /**
     * Gets battle_pass_id
     *
     * @return string
     */
    public function getBattlePassId()
    {
        return $this->container['battle_pass_id'];
    }

    /**
     * Sets battle_pass_id
     *
     * @param string $battle_pass_id The unique id of this battle pass.
     *
     * @return $this
     */
    public function setBattlePassId($battle_pass_id)
    {
        $this->container['battle_pass_id'] = $battle_pass_id;

        return $this;
    }

    /**
     * Gets level_id
     *
     * @return string
     */
    public function getLevelId()
    {
        return $this->container['level_id'];
    }

    /**
     * Sets level_id
     *
     * @param string $level_id Unique id of this BattlePassLevel object.
     *
     * @return $this
     */
    public function setLevelId($level_id)
    {
        $this->container['level_id'] = $level_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id This is your user id. You can set this to whatever you like, either your real user id or an obfuscated user id. However you need to be consistent here. Events linked to this user id only track if challenges or battle passes are unlocked with the same user id.
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets level_position_index
     *
     * @return int
     */
    public function getLevelPositionIndex()
    {
        return $this->container['level_position_index'];
    }

    /**
     * Sets level_position_index
     *
     * @param int $level_position_index Typical usage pattern is to load battle pass levels with getBattlePassLevels operation and store them for rendering. Using this value you can quickly identify the index of the level that changed.
     *
     * @return $this
     */
    public function setLevelPositionIndex($level_position_index)
    {
        $this->container['level_position_index'] = $level_position_index;

        return $this;
    }

    /**
     * Gets reward_amount
     *
     * @return string
     */
    public function getRewardAmount()
    {
        return $this->container['reward_amount'];
    }

    /**
     * Sets reward_amount
     *
     * @param string $reward_amount In the Admin Panel you can set different types of rewards. You can also set an identifier of an in-game-item or anything you like. Use this to include the reward into your own business logic.
     *
     * @return $this
     */
    public function setRewardAmount($reward_amount)
    {
        $this->container['reward_amount'] = $reward_amount;

        return $this;
    }

    /**
     * Gets reward_type_name
     *
     * @return string
     */
    public function getRewardTypeName()
    {
        return $this->container['reward_type_name'];
    }

    /**
     * Sets reward_type_name
     *
     * @param string $reward_type_name There are different types of rewards available. Possible values are Coins, Voucher, Money and Experience.
     *
     * @return $this
     */
    public function setRewardTypeName($reward_type_name)
    {
        $this->container['reward_type_name'] = $reward_type_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
