<?php
/**
 * BattlePass
 *
 * PHP version 5
 *
 * @category Class
 * @package  SCILL
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.21
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SCILL\Model;

use \ArrayAccess;
use \SCILL\ObjectSerializer;

/**
 * BattlePass Class Doc Comment
 *
 * @category Class
 * @package  SCILL
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BattlePass implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BattlePass';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'battle_pass_id' => 'string',
'package_sku' => 'string',
'name' => 'string',
'description' => 'string',
'truncated_description' => 'string',
'image' => 'string',
'image_desktop' => 'string',
'battle_pass_start_date' => 'string',
'battle_pass_end_date' => 'string',
'read_more_link' => 'string',
'page_id' => 'string',
'battle_pass_completed' => 'bool',
'package_value_eur' => 'string',
'purchased_at' => 'string',
'can_purchase_with_money' => 'bool',
'can_purchase_with_coins' => 'bool',
'levels' => '\SCILL\Model\BattlePassLevel[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'battle_pass_id' => null,
'package_sku' => null,
'name' => null,
'description' => null,
'truncated_description' => null,
'image' => null,
'image_desktop' => null,
'battle_pass_start_date' => 'RFC3339',
'battle_pass_end_date' => 'RFC3339',
'read_more_link' => null,
'page_id' => null,
'battle_pass_completed' => null,
'package_value_eur' => null,
'purchased_at' => 'RFC3339',
'can_purchase_with_money' => null,
'can_purchase_with_coins' => null,
'levels' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'battle_pass_id' => 'battle_pass_id',
'package_sku' => 'package_sku',
'name' => 'name',
'description' => 'description',
'truncated_description' => 'truncated_description',
'image' => 'image',
'image_desktop' => 'image_desktop',
'battle_pass_start_date' => 'battle_pass_start_date',
'battle_pass_end_date' => 'battle_pass_end_date',
'read_more_link' => 'read_more_link',
'page_id' => 'page_id',
'battle_pass_completed' => 'battle_pass_completed',
'package_value_eur' => 'package_value_eur',
'purchased_at' => 'purchased_at',
'can_purchase_with_money' => 'can_purchase_with_money',
'can_purchase_with_coins' => 'can_purchase_with_coins',
'levels' => 'levels'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'battle_pass_id' => 'setBattlePassId',
'package_sku' => 'setPackageSku',
'name' => 'setName',
'description' => 'setDescription',
'truncated_description' => 'setTruncatedDescription',
'image' => 'setImage',
'image_desktop' => 'setImageDesktop',
'battle_pass_start_date' => 'setBattlePassStartDate',
'battle_pass_end_date' => 'setBattlePassEndDate',
'read_more_link' => 'setReadMoreLink',
'page_id' => 'setPageId',
'battle_pass_completed' => 'setBattlePassCompleted',
'package_value_eur' => 'setPackageValueEur',
'purchased_at' => 'setPurchasedAt',
'can_purchase_with_money' => 'setCanPurchaseWithMoney',
'can_purchase_with_coins' => 'setCanPurchaseWithCoins',
'levels' => 'setLevels'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'battle_pass_id' => 'getBattlePassId',
'package_sku' => 'getPackageSku',
'name' => 'getName',
'description' => 'getDescription',
'truncated_description' => 'getTruncatedDescription',
'image' => 'getImage',
'image_desktop' => 'getImageDesktop',
'battle_pass_start_date' => 'getBattlePassStartDate',
'battle_pass_end_date' => 'getBattlePassEndDate',
'read_more_link' => 'getReadMoreLink',
'page_id' => 'getPageId',
'battle_pass_completed' => 'getBattlePassCompleted',
'package_value_eur' => 'getPackageValueEur',
'purchased_at' => 'getPurchasedAt',
'can_purchase_with_money' => 'getCanPurchaseWithMoney',
'can_purchase_with_coins' => 'getCanPurchaseWithCoins',
'levels' => 'getLevels'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['battle_pass_id'] = isset($data['battle_pass_id']) ? $data['battle_pass_id'] : null;
        $this->container['package_sku'] = isset($data['package_sku']) ? $data['package_sku'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['truncated_description'] = isset($data['truncated_description']) ? $data['truncated_description'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['image_desktop'] = isset($data['image_desktop']) ? $data['image_desktop'] : null;
        $this->container['battle_pass_start_date'] = isset($data['battle_pass_start_date']) ? $data['battle_pass_start_date'] : null;
        $this->container['battle_pass_end_date'] = isset($data['battle_pass_end_date']) ? $data['battle_pass_end_date'] : null;
        $this->container['read_more_link'] = isset($data['read_more_link']) ? $data['read_more_link'] : null;
        $this->container['page_id'] = isset($data['page_id']) ? $data['page_id'] : null;
        $this->container['battle_pass_completed'] = isset($data['battle_pass_completed']) ? $data['battle_pass_completed'] : null;
        $this->container['package_value_eur'] = isset($data['package_value_eur']) ? $data['package_value_eur'] : null;
        $this->container['purchased_at'] = isset($data['purchased_at']) ? $data['purchased_at'] : null;
        $this->container['can_purchase_with_money'] = isset($data['can_purchase_with_money']) ? $data['can_purchase_with_money'] : null;
        $this->container['can_purchase_with_coins'] = isset($data['can_purchase_with_coins']) ? $data['can_purchase_with_coins'] : null;
        $this->container['levels'] = isset($data['levels']) ? $data['levels'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['battle_pass_id'] === null) {
            $invalidProperties[] = "'battle_pass_id' can't be null";
        }
        if ($this->container['package_sku'] === null) {
            $invalidProperties[] = "'package_sku' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['truncated_description'] === null) {
            $invalidProperties[] = "'truncated_description' can't be null";
        }
        if ($this->container['image'] === null) {
            $invalidProperties[] = "'image' can't be null";
        }
        if ($this->container['image_desktop'] === null) {
            $invalidProperties[] = "'image_desktop' can't be null";
        }
        if ($this->container['battle_pass_start_date'] === null) {
            $invalidProperties[] = "'battle_pass_start_date' can't be null";
        }
        if ($this->container['battle_pass_end_date'] === null) {
            $invalidProperties[] = "'battle_pass_end_date' can't be null";
        }
        if ($this->container['read_more_link'] === null) {
            $invalidProperties[] = "'read_more_link' can't be null";
        }
        if ($this->container['page_id'] === null) {
            $invalidProperties[] = "'page_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets battle_pass_id
     *
     * @return string
     */
    public function getBattlePassId()
    {
        return $this->container['battle_pass_id'];
    }

    /**
     * Sets battle_pass_id
     *
     * @param string $battle_pass_id The unique id of this battle pass.
     *
     * @return $this
     */
    public function setBattlePassId($battle_pass_id)
    {
        $this->container['battle_pass_id'] = $battle_pass_id;

        return $this;
    }

    /**
     * Gets package_sku
     *
     * @return string
     */
    public function getPackageSku()
    {
        return $this->container['package_sku'];
    }

    /**
     * Sets package_sku
     *
     * @param string $package_sku If you want to sell Battle Passes you can use this field to trigger in-app purchase products within your mobile app. You can set this value in the Admin Panel.
     *
     * @return $this
     */
    public function setPackageSku($package_sku)
    {
        $this->container['package_sku'] = $package_sku;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the Battle Pass in the local language set in the request (see Setting Language). In the admin panel you can either create HTML content or plain text.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The description of the Battle Pass in the local language set in the request (see Setting Language). In the admin panel you can either create HTML content or plain text.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets truncated_description
     *
     * @return string
     */
    public function getTruncatedDescription()
    {
        return $this->container['truncated_description'];
    }

    /**
     * Sets truncated_description
     *
     * @param string $truncated_description A short description in the local language you can use to teaser battle passes or implement “expand for more” functionality.
     *
     * @return $this
     */
    public function setTruncatedDescription($truncated_description)
    {
        $this->container['truncated_description'] = $truncated_description;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string $image The mobile sized image name. For example you can use image and image_desktop to build a srcset in HTML or use them and size manually where you need them.
     *
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets image_desktop
     *
     * @return string
     */
    public function getImageDesktop()
    {
        return $this->container['image_desktop'];
    }

    /**
     * Sets image_desktop
     *
     * @param string $image_desktop The desktop sized image name or URL
     *
     * @return $this
     */
    public function setImageDesktop($image_desktop)
    {
        $this->container['image_desktop'] = $image_desktop;

        return $this;
    }

    /**
     * Gets battle_pass_start_date
     *
     * @return string
     */
    public function getBattlePassStartDate()
    {
        return $this->container['battle_pass_start_date'];
    }

    /**
     * Sets battle_pass_start_date
     *
     * @param string $battle_pass_start_date The date (in iso format) when the Battle Pass starts. Tracking begins once this date is passed.
     *
     * @return $this
     */
    public function setBattlePassStartDate($battle_pass_start_date)
    {
        $this->container['battle_pass_start_date'] = $battle_pass_start_date;

        return $this;
    }

    /**
     * Gets battle_pass_end_date
     *
     * @return string
     */
    public function getBattlePassEndDate()
    {
        return $this->container['battle_pass_end_date'];
    }

    /**
     * Sets battle_pass_end_date
     *
     * @param string $battle_pass_end_date The date (in iso format) when the Battle Pass ends. Tracking stops once the end is reached and users will not be able to progress further than what they have achieved up to that point.
     *
     * @return $this
     */
    public function setBattlePassEndDate($battle_pass_end_date)
    {
        $this->container['battle_pass_end_date'] = $battle_pass_end_date;

        return $this;
    }

    /**
     * Gets read_more_link
     *
     * @return string
     */
    public function getReadMoreLink()
    {
        return $this->container['read_more_link'];
    }

    /**
     * Sets read_more_link
     *
     * @param string $read_more_link If the Battle Pass costs “money” you may want to route the user to a web site/page, where they can learn more about this battle pass. You can also use this field to route the user inside your application by providing a path or whatever works for you.
     *
     * @return $this
     */
    public function setReadMoreLink($read_more_link)
    {
        $this->container['read_more_link'] = $read_more_link;

        return $this;
    }

    /**
     * Gets page_id
     *
     * @return string
     */
    public function getPageId()
    {
        return $this->container['page_id'];
    }

    /**
     * Sets page_id
     *
     * @param string $page_id Another field you can set in the admin panel. SCILL Play uses this field to show a specific page by name.
     *
     * @return $this
     */
    public function setPageId($page_id)
    {
        $this->container['page_id'] = $page_id;

        return $this;
    }

    /**
     * Gets battle_pass_completed
     *
     * @return bool
     */
    public function getBattlePassCompleted()
    {
        return $this->container['battle_pass_completed'];
    }

    /**
     * Sets battle_pass_completed
     *
     * @param bool $battle_pass_completed This option is not available in all requests. It indicates if the user has completed this Battle Pass.
     *
     * @return $this
     */
    public function setBattlePassCompleted($battle_pass_completed)
    {
        $this->container['battle_pass_completed'] = $battle_pass_completed;

        return $this;
    }

    /**
     * Gets package_value_eur
     *
     * @return string
     */
    public function getPackageValueEur()
    {
        return $this->container['package_value_eur'];
    }

    /**
     * Sets package_value_eur
     *
     * @param string $package_value_eur Price for the Battle Pass. You can set this field in the Admin Panel. Often it makes sense to use Pricing functionality of in-app purchase APIs in the relevant eco system (Steam, AppStore, Google Play Store) to request the price, but if you don’t have access to that, you can use this field.
     *
     * @return $this
     */
    public function setPackageValueEur($package_value_eur)
    {
        $this->container['package_value_eur'] = $package_value_eur;

        return $this;
    }

    /**
     * Gets purchased_at
     *
     * @return string
     */
    public function getPurchasedAt()
    {
        return $this->container['purchased_at'];
    }

    /**
     * Sets purchased_at
     *
     * @param string $purchased_at The date in iso format when the user purchased/unlocked this Battle Pass.
     *
     * @return $this
     */
    public function setPurchasedAt($purchased_at)
    {
        $this->container['purchased_at'] = $purchased_at;

        return $this;
    }

    /**
     * Gets can_purchase_with_money
     *
     * @return bool
     */
    public function getCanPurchaseWithMoney()
    {
        return $this->container['can_purchase_with_money'];
    }

    /**
     * Sets can_purchase_with_money
     *
     * @param bool $can_purchase_with_money Indicates that this Battle Pass can be purchased via in-app purchase. This can be set in the Admin Panel.
     *
     * @return $this
     */
    public function setCanPurchaseWithMoney($can_purchase_with_money)
    {
        $this->container['can_purchase_with_money'] = $can_purchase_with_money;

        return $this;
    }

    /**
     * Gets can_purchase_with_coins
     *
     * @return bool
     */
    public function getCanPurchaseWithCoins()
    {
        return $this->container['can_purchase_with_coins'];
    }

    /**
     * Sets can_purchase_with_coins
     *
     * @param bool $can_purchase_with_coins Indicates that this Battle Pass can be purchased with SCILL Coins. This can be set in the Admin Panel.
     *
     * @return $this
     */
    public function setCanPurchaseWithCoins($can_purchase_with_coins)
    {
        $this->container['can_purchase_with_coins'] = $can_purchase_with_coins;

        return $this;
    }

    /**
     * Gets levels
     *
     * @return \SCILL\Model\BattlePassLevel[]
     */
    public function getLevels()
    {
        return $this->container['levels'];
    }

    /**
     * Sets levels
     *
     * @param \SCILL\Model\BattlePassLevel[] $levels An array of BattlePassLevel objects.
     *
     * @return $this
     */
    public function setLevels($levels)
    {
        $this->container['levels'] = $levels;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
