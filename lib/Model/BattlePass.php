<?php
/**
 * BattlePass
 *
 * PHP version 5
 *
 * @category Class
 * @package  SCILL
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SCILL\Model;

use \ArrayAccess;
use \SCILL\ObjectSerializer;

/**
 * BattlePass Class Doc Comment
 *
 * @category Class
 * @package  SCILL
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BattlePass implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BattlePass';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'battle_pass_id' => 'string',
'app_id' => 'string',
'battle_pass_name' => 'string',
'battle_pass_description' => 'string',
'battle_pass_short_description' => 'string',
'battle_pass_disclaimer' => 'string',
'battle_pass_priority' => 'int',
'package_sku_ios' => 'string',
'package_sku_android' => 'string',
'image_xs' => 'string',
'image_s' => 'string',
'image_m' => 'string',
'image_l' => 'string',
'image_xl' => 'string',
'start_date' => 'string',
'end_date' => 'string',
'read_more_link' => 'string',
'is_unlocked_incrementally' => 'bool',
'is_active' => 'bool',
'unlocked_at' => 'string',
'can_purchase_with_money' => 'bool',
'can_purchase_with_coins' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'battle_pass_id' => null,
'app_id' => null,
'battle_pass_name' => null,
'battle_pass_description' => null,
'battle_pass_short_description' => null,
'battle_pass_disclaimer' => null,
'battle_pass_priority' => null,
'package_sku_ios' => null,
'package_sku_android' => null,
'image_xs' => null,
'image_s' => null,
'image_m' => null,
'image_l' => null,
'image_xl' => null,
'start_date' => 'RFC3339',
'end_date' => 'RFC3339',
'read_more_link' => null,
'is_unlocked_incrementally' => null,
'is_active' => null,
'unlocked_at' => 'RFC3339',
'can_purchase_with_money' => null,
'can_purchase_with_coins' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'battle_pass_id' => 'battle_pass_id',
'app_id' => 'app_id',
'battle_pass_name' => 'battle_pass_name',
'battle_pass_description' => 'battle_pass_description',
'battle_pass_short_description' => 'battle_pass_short_description',
'battle_pass_disclaimer' => 'battle_pass_disclaimer',
'battle_pass_priority' => 'battle_pass_priority',
'package_sku_ios' => 'package_sku_ios',
'package_sku_android' => 'package_sku_android',
'image_xs' => 'image_xs',
'image_s' => 'image_s',
'image_m' => 'image_m',
'image_l' => 'image_l',
'image_xl' => 'image_xl',
'start_date' => 'start_date',
'end_date' => 'end_date',
'read_more_link' => 'read_more_link',
'is_unlocked_incrementally' => 'is_unlocked_incrementally',
'is_active' => 'is_active',
'unlocked_at' => 'unlocked_at',
'can_purchase_with_money' => 'can_purchase_with_money',
'can_purchase_with_coins' => 'can_purchase_with_coins'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'battle_pass_id' => 'setBattlePassId',
'app_id' => 'setAppId',
'battle_pass_name' => 'setBattlePassName',
'battle_pass_description' => 'setBattlePassDescription',
'battle_pass_short_description' => 'setBattlePassShortDescription',
'battle_pass_disclaimer' => 'setBattlePassDisclaimer',
'battle_pass_priority' => 'setBattlePassPriority',
'package_sku_ios' => 'setPackageSkuIos',
'package_sku_android' => 'setPackageSkuAndroid',
'image_xs' => 'setImageXs',
'image_s' => 'setImageS',
'image_m' => 'setImageM',
'image_l' => 'setImageL',
'image_xl' => 'setImageXl',
'start_date' => 'setStartDate',
'end_date' => 'setEndDate',
'read_more_link' => 'setReadMoreLink',
'is_unlocked_incrementally' => 'setIsUnlockedIncrementally',
'is_active' => 'setIsActive',
'unlocked_at' => 'setUnlockedAt',
'can_purchase_with_money' => 'setCanPurchaseWithMoney',
'can_purchase_with_coins' => 'setCanPurchaseWithCoins'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'battle_pass_id' => 'getBattlePassId',
'app_id' => 'getAppId',
'battle_pass_name' => 'getBattlePassName',
'battle_pass_description' => 'getBattlePassDescription',
'battle_pass_short_description' => 'getBattlePassShortDescription',
'battle_pass_disclaimer' => 'getBattlePassDisclaimer',
'battle_pass_priority' => 'getBattlePassPriority',
'package_sku_ios' => 'getPackageSkuIos',
'package_sku_android' => 'getPackageSkuAndroid',
'image_xs' => 'getImageXs',
'image_s' => 'getImageS',
'image_m' => 'getImageM',
'image_l' => 'getImageL',
'image_xl' => 'getImageXl',
'start_date' => 'getStartDate',
'end_date' => 'getEndDate',
'read_more_link' => 'getReadMoreLink',
'is_unlocked_incrementally' => 'getIsUnlockedIncrementally',
'is_active' => 'getIsActive',
'unlocked_at' => 'getUnlockedAt',
'can_purchase_with_money' => 'getCanPurchaseWithMoney',
'can_purchase_with_coins' => 'getCanPurchaseWithCoins'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['battle_pass_id'] = isset($data['battle_pass_id']) ? $data['battle_pass_id'] : null;
        $this->container['app_id'] = isset($data['app_id']) ? $data['app_id'] : null;
        $this->container['battle_pass_name'] = isset($data['battle_pass_name']) ? $data['battle_pass_name'] : null;
        $this->container['battle_pass_description'] = isset($data['battle_pass_description']) ? $data['battle_pass_description'] : null;
        $this->container['battle_pass_short_description'] = isset($data['battle_pass_short_description']) ? $data['battle_pass_short_description'] : null;
        $this->container['battle_pass_disclaimer'] = isset($data['battle_pass_disclaimer']) ? $data['battle_pass_disclaimer'] : null;
        $this->container['battle_pass_priority'] = isset($data['battle_pass_priority']) ? $data['battle_pass_priority'] : null;
        $this->container['package_sku_ios'] = isset($data['package_sku_ios']) ? $data['package_sku_ios'] : null;
        $this->container['package_sku_android'] = isset($data['package_sku_android']) ? $data['package_sku_android'] : null;
        $this->container['image_xs'] = isset($data['image_xs']) ? $data['image_xs'] : null;
        $this->container['image_s'] = isset($data['image_s']) ? $data['image_s'] : null;
        $this->container['image_m'] = isset($data['image_m']) ? $data['image_m'] : null;
        $this->container['image_l'] = isset($data['image_l']) ? $data['image_l'] : null;
        $this->container['image_xl'] = isset($data['image_xl']) ? $data['image_xl'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['read_more_link'] = isset($data['read_more_link']) ? $data['read_more_link'] : null;
        $this->container['is_unlocked_incrementally'] = isset($data['is_unlocked_incrementally']) ? $data['is_unlocked_incrementally'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['unlocked_at'] = isset($data['unlocked_at']) ? $data['unlocked_at'] : null;
        $this->container['can_purchase_with_money'] = isset($data['can_purchase_with_money']) ? $data['can_purchase_with_money'] : null;
        $this->container['can_purchase_with_coins'] = isset($data['can_purchase_with_coins']) ? $data['can_purchase_with_coins'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets battle_pass_id
     *
     * @return string
     */
    public function getBattlePassId()
    {
        return $this->container['battle_pass_id'];
    }

    /**
     * Sets battle_pass_id
     *
     * @param string $battle_pass_id The unique id of this battle pass.
     *
     * @return $this
     */
    public function setBattlePassId($battle_pass_id)
    {
        $this->container['battle_pass_id'] = $battle_pass_id;

        return $this;
    }

    /**
     * Gets app_id
     *
     * @return string
     */
    public function getAppId()
    {
        return $this->container['app_id'];
    }

    /**
     * Sets app_id
     *
     * @param string $app_id The unique id of the app
     *
     * @return $this
     */
    public function setAppId($app_id)
    {
        $this->container['app_id'] = $app_id;

        return $this;
    }

    /**
     * Gets battle_pass_name
     *
     * @return string
     */
    public function getBattlePassName()
    {
        return $this->container['battle_pass_name'];
    }

    /**
     * Sets battle_pass_name
     *
     * @param string $battle_pass_name The name of the battle bass. You can set that in the Admin Panel. The language is set with the query parameter language. See documentation for more info on that.
     *
     * @return $this
     */
    public function setBattlePassName($battle_pass_name)
    {
        $this->container['battle_pass_name'] = $battle_pass_name;

        return $this;
    }

    /**
     * Gets battle_pass_description
     *
     * @return string
     */
    public function getBattlePassDescription()
    {
        return $this->container['battle_pass_description'];
    }

    /**
     * Sets battle_pass_description
     *
     * @param string $battle_pass_description The description of the battle bass. You can set that in the Admin Panel and it can also be HTML. The language is set with the query parameter language. See documentation for more info on that.
     *
     * @return $this
     */
    public function setBattlePassDescription($battle_pass_description)
    {
        $this->container['battle_pass_description'] = $battle_pass_description;

        return $this;
    }

    /**
     * Gets battle_pass_short_description
     *
     * @return string
     */
    public function getBattlePassShortDescription()
    {
        return $this->container['battle_pass_short_description'];
    }

    /**
     * Sets battle_pass_short_description
     *
     * @param string $battle_pass_short_description A short description of the battle bass. You can set that in the Admin Panel and it can also be HTML. The language is set with the query parameter language. See documentation for more info on that.
     *
     * @return $this
     */
    public function setBattlePassShortDescription($battle_pass_short_description)
    {
        $this->container['battle_pass_short_description'] = $battle_pass_short_description;

        return $this;
    }

    /**
     * Gets battle_pass_disclaimer
     *
     * @return string
     */
    public function getBattlePassDisclaimer()
    {
        return $this->container['battle_pass_disclaimer'];
    }

    /**
     * Sets battle_pass_disclaimer
     *
     * @param string $battle_pass_disclaimer Use this to provide some terms and conditions following along this battle passes purchase.
     *
     * @return $this
     */
    public function setBattlePassDisclaimer($battle_pass_disclaimer)
    {
        $this->container['battle_pass_disclaimer'] = $battle_pass_disclaimer;

        return $this;
    }

    /**
     * Gets battle_pass_priority
     *
     * @return int
     */
    public function getBattlePassPriority()
    {
        return $this->container['battle_pass_priority'];
    }

    /**
     * Sets battle_pass_priority
     *
     * @param int $battle_pass_priority The priority of the battle pass. I.e. if multiple are available you can use this field to sort them.
     *
     * @return $this
     */
    public function setBattlePassPriority($battle_pass_priority)
    {
        $this->container['battle_pass_priority'] = $battle_pass_priority;

        return $this;
    }

    /**
     * Gets package_sku_ios
     *
     * @return string
     */
    public function getPackageSkuIos()
    {
        return $this->container['package_sku_ios'];
    }

    /**
     * Sets package_sku_ios
     *
     * @param string $package_sku_ios If you want to sell Battle Passes you can use this field to trigger in-app purchase products within your mobile app. You can set this value in the Admin Panel. This one is for iOS.
     *
     * @return $this
     */
    public function setPackageSkuIos($package_sku_ios)
    {
        $this->container['package_sku_ios'] = $package_sku_ios;

        return $this;
    }

    /**
     * Gets package_sku_android
     *
     * @return string
     */
    public function getPackageSkuAndroid()
    {
        return $this->container['package_sku_android'];
    }

    /**
     * Sets package_sku_android
     *
     * @param string $package_sku_android If you want to sell Battle Passes you can use this field to trigger in-app purchase products within your mobile app. You can set this value in the Admin Panel. Use this to set the package string for Android.
     *
     * @return $this
     */
    public function setPackageSkuAndroid($package_sku_android)
    {
        $this->container['package_sku_android'] = $package_sku_android;

        return $this;
    }

    /**
     * Gets image_xs
     *
     * @return string
     */
    public function getImageXs()
    {
        return $this->container['image_xs'];
    }

    /**
     * Sets image_xs
     *
     * @param string $image_xs The xs sized image name or url. You can determine the best size distribution yourself and depends on your application or UI
     *
     * @return $this
     */
    public function setImageXs($image_xs)
    {
        $this->container['image_xs'] = $image_xs;

        return $this;
    }

    /**
     * Gets image_s
     *
     * @return string
     */
    public function getImageS()
    {
        return $this->container['image_s'];
    }

    /**
     * Sets image_s
     *
     * @param string $image_s The s sized image name or url. You can determine the best size distribution yourself and depends on your application or UI
     *
     * @return $this
     */
    public function setImageS($image_s)
    {
        $this->container['image_s'] = $image_s;

        return $this;
    }

    /**
     * Gets image_m
     *
     * @return string
     */
    public function getImageM()
    {
        return $this->container['image_m'];
    }

    /**
     * Sets image_m
     *
     * @param string $image_m The m sized image name or url. You can determine the best size distribution yourself and depends on your application or UI
     *
     * @return $this
     */
    public function setImageM($image_m)
    {
        $this->container['image_m'] = $image_m;

        return $this;
    }

    /**
     * Gets image_l
     *
     * @return string
     */
    public function getImageL()
    {
        return $this->container['image_l'];
    }

    /**
     * Sets image_l
     *
     * @param string $image_l The l sized image name or url. You can determine the best size distribution yourself and depends on your application or UI
     *
     * @return $this
     */
    public function setImageL($image_l)
    {
        $this->container['image_l'] = $image_l;

        return $this;
    }

    /**
     * Gets image_xl
     *
     * @return string
     */
    public function getImageXl()
    {
        return $this->container['image_xl'];
    }

    /**
     * Sets image_xl
     *
     * @param string $image_xl The xl sized image name or url. You can determine the best size distribution yourself and depends on your application or UI
     *
     * @return $this
     */
    public function setImageXl($image_xl)
    {
        $this->container['image_xl'] = $image_xl;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string $start_date The date (in iso format) when the Battle Pass starts. Tracking begins once this date is passed.
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string $end_date The date (in iso format) when the Battle Pass ends. Tracking stops once the end is reached and users will not be able to progress further than what they have achieved up to that point.
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets read_more_link
     *
     * @return string
     */
    public function getReadMoreLink()
    {
        return $this->container['read_more_link'];
    }

    /**
     * Sets read_more_link
     *
     * @param string $read_more_link If the Battle Pass costs “money” you may want to route the user to a web site/page, where they can learn more about this battle pass. You can also use this field to route the user inside your application by providing a path or whatever works for you.
     *
     * @return $this
     */
    public function setReadMoreLink($read_more_link)
    {
        $this->container['read_more_link'] = $read_more_link;

        return $this;
    }

    /**
     * Gets is_unlocked_incrementally
     *
     * @return bool
     */
    public function getIsUnlockedIncrementally()
    {
        return $this->container['is_unlocked_incrementally'];
    }

    /**
     * Sets is_unlocked_incrementally
     *
     * @param bool $is_unlocked_incrementally Indicates if one level after the other must be activated or if users can activate whichever level they want. Typically battle passes are unlocked level by level, but if battle passes are used for other applications (like user referal programs) it can be useful to set this to false.
     *
     * @return $this
     */
    public function setIsUnlockedIncrementally($is_unlocked_incrementally)
    {
        $this->container['is_unlocked_incrementally'] = $is_unlocked_incrementally;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active Indicated if this battle pass is active.
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets unlocked_at
     *
     * @return string
     */
    public function getUnlockedAt()
    {
        return $this->container['unlocked_at'];
    }

    /**
     * Sets unlocked_at
     *
     * @param string $unlocked_at The date in iso format when the user unlocked this Battle Pass.
     *
     * @return $this
     */
    public function setUnlockedAt($unlocked_at)
    {
        $this->container['unlocked_at'] = $unlocked_at;

        return $this;
    }

    /**
     * Gets can_purchase_with_money
     *
     * @return bool
     */
    public function getCanPurchaseWithMoney()
    {
        return $this->container['can_purchase_with_money'];
    }

    /**
     * Sets can_purchase_with_money
     *
     * @param bool $can_purchase_with_money Indicates that this Battle Pass can be purchased via in-app purchase. This can be set in the Admin Panel.
     *
     * @return $this
     */
    public function setCanPurchaseWithMoney($can_purchase_with_money)
    {
        $this->container['can_purchase_with_money'] = $can_purchase_with_money;

        return $this;
    }

    /**
     * Gets can_purchase_with_coins
     *
     * @return bool
     */
    public function getCanPurchaseWithCoins()
    {
        return $this->container['can_purchase_with_coins'];
    }

    /**
     * Sets can_purchase_with_coins
     *
     * @param bool $can_purchase_with_coins Indicates that this Battle Pass can be purchased with SCILL Coins. This can be set in the Admin Panel.
     *
     * @return $this
     */
    public function setCanPurchaseWithCoins($can_purchase_with_coins)
    {
        $this->container['can_purchase_with_coins'] = $can_purchase_with_coins;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
