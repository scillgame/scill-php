<?php
/**
 * App
 *
 * PHP version 5
 *
 * @category Class
 * @package  SCILL
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SCILL API to consume data structures
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.21
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SCILL\Model;

use \ArrayAccess;
use \SCILL\ObjectSerializer;

/**
 * App Class Doc Comment
 *
 * @category Class
 * @package  SCILL
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class App implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'App';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'app_id' => 'int',
'app_name' => 'string',
'app_tag' => 'string',
'app_active' => 'bool',
'app_image' => 'string',
'app_image_hd' => 'string',
'has_battle_passes' => 'bool',
'has_battle_challenges' => 'bool',
'request_count' => 'int',
'rate_limit' => 'int',
'event_limit' => 'int',
'fusion_id' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'app_id' => null,
'app_name' => null,
'app_tag' => null,
'app_active' => null,
'app_image' => null,
'app_image_hd' => null,
'has_battle_passes' => null,
'has_battle_challenges' => null,
'request_count' => null,
'rate_limit' => null,
'event_limit' => null,
'fusion_id' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'app_id' => 'app_id',
'app_name' => 'app_name',
'app_tag' => 'app_tag',
'app_active' => 'app_active',
'app_image' => 'app_image',
'app_image_hd' => 'app_image_hd',
'has_battle_passes' => 'has_battle_passes',
'has_battle_challenges' => 'has_battle_challenges',
'request_count' => 'request_count',
'rate_limit' => 'rate_limit',
'event_limit' => 'event_limit',
'fusion_id' => 'fusion_id'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'app_id' => 'setAppId',
'app_name' => 'setAppName',
'app_tag' => 'setAppTag',
'app_active' => 'setAppActive',
'app_image' => 'setAppImage',
'app_image_hd' => 'setAppImageHd',
'has_battle_passes' => 'setHasBattlePasses',
'has_battle_challenges' => 'setHasBattleChallenges',
'request_count' => 'setRequestCount',
'rate_limit' => 'setRateLimit',
'event_limit' => 'setEventLimit',
'fusion_id' => 'setFusionId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'app_id' => 'getAppId',
'app_name' => 'getAppName',
'app_tag' => 'getAppTag',
'app_active' => 'getAppActive',
'app_image' => 'getAppImage',
'app_image_hd' => 'getAppImageHd',
'has_battle_passes' => 'getHasBattlePasses',
'has_battle_challenges' => 'getHasBattleChallenges',
'request_count' => 'getRequestCount',
'rate_limit' => 'getRateLimit',
'event_limit' => 'getEventLimit',
'fusion_id' => 'getFusionId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['app_id'] = isset($data['app_id']) ? $data['app_id'] : null;
        $this->container['app_name'] = isset($data['app_name']) ? $data['app_name'] : null;
        $this->container['app_tag'] = isset($data['app_tag']) ? $data['app_tag'] : null;
        $this->container['app_active'] = isset($data['app_active']) ? $data['app_active'] : null;
        $this->container['app_image'] = isset($data['app_image']) ? $data['app_image'] : null;
        $this->container['app_image_hd'] = isset($data['app_image_hd']) ? $data['app_image_hd'] : null;
        $this->container['has_battle_passes'] = isset($data['has_battle_passes']) ? $data['has_battle_passes'] : null;
        $this->container['has_battle_challenges'] = isset($data['has_battle_challenges']) ? $data['has_battle_challenges'] : null;
        $this->container['request_count'] = isset($data['request_count']) ? $data['request_count'] : null;
        $this->container['rate_limit'] = isset($data['rate_limit']) ? $data['rate_limit'] : null;
        $this->container['event_limit'] = isset($data['event_limit']) ? $data['event_limit'] : null;
        $this->container['fusion_id'] = isset($data['fusion_id']) ? $data['fusion_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['app_id'] === null) {
            $invalidProperties[] = "'app_id' can't be null";
        }
        if ($this->container['app_name'] === null) {
            $invalidProperties[] = "'app_name' can't be null";
        }
        if ($this->container['app_tag'] === null) {
            $invalidProperties[] = "'app_tag' can't be null";
        }
        if ($this->container['app_image'] === null) {
            $invalidProperties[] = "'app_image' can't be null";
        }
        if ($this->container['app_image_hd'] === null) {
            $invalidProperties[] = "'app_image_hd' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets app_id
     *
     * @return int
     */
    public function getAppId()
    {
        return $this->container['app_id'];
    }

    /**
     * Sets app_id
     *
     * @param int $app_id The id of the app
     *
     * @return $this
     */
    public function setAppId($app_id)
    {
        $this->container['app_id'] = $app_id;

        return $this;
    }

    /**
     * Gets app_name
     *
     * @return string
     */
    public function getAppName()
    {
        return $this->container['app_name'];
    }

    /**
     * Sets app_name
     *
     * @param string $app_name The name of your app
     *
     * @return $this
     */
    public function setAppName($app_name)
    {
        $this->container['app_name'] = $app_name;

        return $this;
    }

    /**
     * Gets app_tag
     *
     * @return string
     */
    public function getAppTag()
    {
        return $this->container['app_tag'];
    }

    /**
     * Sets app_tag
     *
     * @param string $app_tag A unique identifier for your game with only alphanumeric characters, dash and underscore
     *
     * @return $this
     */
    public function setAppTag($app_tag)
    {
        $this->container['app_tag'] = $app_tag;

        return $this;
    }

    /**
     * Gets app_active
     *
     * @return bool
     */
    public function getAppActive()
    {
        return $this->container['app_active'];
    }

    /**
     * Sets app_active
     *
     * @param bool $app_active Indicates if this app is active. Use the DELETE route to deactivate an app
     *
     * @return $this
     */
    public function setAppActive($app_active)
    {
        $this->container['app_active'] = $app_active;

        return $this;
    }

    /**
     * Gets app_image
     *
     * @return string
     */
    public function getAppImage()
    {
        return $this->container['app_image'];
    }

    /**
     * Sets app_image
     *
     * @param string $app_image A string identifying the apps logo image in your own application. Can also be a URL.
     *
     * @return $this
     */
    public function setAppImage($app_image)
    {
        $this->container['app_image'] = $app_image;

        return $this;
    }

    /**
     * Gets app_image_hd
     *
     * @return string
     */
    public function getAppImageHd()
    {
        return $this->container['app_image_hd'];
    }

    /**
     * Sets app_image_hd
     *
     * @param string $app_image_hd A string identifying the apps logo image in high quality in your own application. Can also be a URL.
     *
     * @return $this
     */
    public function setAppImageHd($app_image_hd)
    {
        $this->container['app_image_hd'] = $app_image_hd;

        return $this;
    }

    /**
     * Gets has_battle_passes
     *
     * @return bool
     */
    public function getHasBattlePasses()
    {
        return $this->container['has_battle_passes'];
    }

    /**
     * Sets has_battle_passes
     *
     * @param bool $has_battle_passes Indicates if this app has activated the battle pass system
     *
     * @return $this
     */
    public function setHasBattlePasses($has_battle_passes)
    {
        $this->container['has_battle_passes'] = $has_battle_passes;

        return $this;
    }

    /**
     * Gets has_battle_challenges
     *
     * @return bool
     */
    public function getHasBattleChallenges()
    {
        return $this->container['has_battle_challenges'];
    }

    /**
     * Sets has_battle_challenges
     *
     * @param bool $has_battle_challenges Indicates if this app has activated the challenges system
     *
     * @return $this
     */
    public function setHasBattleChallenges($has_battle_challenges)
    {
        $this->container['has_battle_challenges'] = $has_battle_challenges;

        return $this;
    }

    /**
     * Gets request_count
     *
     * @return int
     */
    public function getRequestCount()
    {
        return $this->container['request_count'];
    }

    /**
     * Sets request_count
     *
     * @param int $request_count Number of requests sent in the current month
     *
     * @return $this
     */
    public function setRequestCount($request_count)
    {
        $this->container['request_count'] = $request_count;

        return $this;
    }

    /**
     * Gets rate_limit
     *
     * @return int
     */
    public function getRateLimit()
    {
        return $this->container['rate_limit'];
    }

    /**
     * Sets rate_limit
     *
     * @param int $rate_limit The number of requests allowed per month
     *
     * @return $this
     */
    public function setRateLimit($rate_limit)
    {
        $this->container['rate_limit'] = $rate_limit;

        return $this;
    }

    /**
     * Gets event_limit
     *
     * @return int
     */
    public function getEventLimit()
    {
        return $this->container['event_limit'];
    }

    /**
     * Sets event_limit
     *
     * @param int $event_limit The number of events allowed per month
     *
     * @return $this
     */
    public function setEventLimit($event_limit)
    {
        $this->container['event_limit'] = $event_limit;

        return $this;
    }

    /**
     * Gets fusion_id
     *
     * @return int
     */
    public function getFusionId()
    {
        return $this->container['fusion_id'];
    }

    /**
     * Sets fusion_id
     *
     * @param int $fusion_id The 4Players User Id
     *
     * @return $this
     */
    public function setFusionId($fusion_id)
    {
        $this->container['fusion_id'] = $fusion_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
