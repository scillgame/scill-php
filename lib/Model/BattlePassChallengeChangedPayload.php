<?php
/**
 * BattlePassChallengeChangedPayload
 *
 * PHP version 5
 *
 * @category Class
 * @package  SCILL
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.24
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SCILL\Model;

use \ArrayAccess;
use \SCILL\ObjectSerializer;

/**
 * BattlePassChallengeChangedPayload Class Doc Comment
 *
 * @category Class
 * @description This payload is sent in Webhooks and notifications as part of the battlepass-challenge-changed notification. The idea is to provide enough information to quickly update UI or implementing backend logic. We provide both the state of the object before it changed, and after that. This allows you to react in many different ways.
 * @package  SCILL
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BattlePassChallengeChangedPayload implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BattlePassChallengeChangedPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'webhook_type' => 'string',
'old_battle_pass_challenge' => '\SCILL\Model\BattlePassChallengeState',
'new_battle_pass_challenge' => '\SCILL\Model\BattlePassChallengeState'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'webhook_type' => null,
'old_battle_pass_challenge' => null,
'new_battle_pass_challenge' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'webhook_type' => 'webhook_type',
'old_battle_pass_challenge' => 'old_battle_pass_challenge',
'new_battle_pass_challenge' => 'new_battle_pass_challenge'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'webhook_type' => 'setWebhookType',
'old_battle_pass_challenge' => 'setOldBattlePassChallenge',
'new_battle_pass_challenge' => 'setNewBattlePassChallenge'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'webhook_type' => 'getWebhookType',
'old_battle_pass_challenge' => 'getOldBattlePassChallenge',
'new_battle_pass_challenge' => 'getNewBattlePassChallenge'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['webhook_type'] = isset($data['webhook_type']) ? $data['webhook_type'] : null;
        $this->container['old_battle_pass_challenge'] = isset($data['old_battle_pass_challenge']) ? $data['old_battle_pass_challenge'] : null;
        $this->container['new_battle_pass_challenge'] = isset($data['new_battle_pass_challenge']) ? $data['new_battle_pass_challenge'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets webhook_type
     *
     * @return string
     */
    public function getWebhookType()
    {
        return $this->container['webhook_type'];
    }

    /**
     * Sets webhook_type
     *
     * @param string $webhook_type The type of the notification. If you receive this payload, it's most likely battlepass-challenge-changed
     *
     * @return $this
     */
    public function setWebhookType($webhook_type)
    {
        $this->container['webhook_type'] = $webhook_type;

        return $this;
    }

    /**
     * Gets old_battle_pass_challenge
     *
     * @return \SCILL\Model\BattlePassChallengeState
     */
    public function getOldBattlePassChallenge()
    {
        return $this->container['old_battle_pass_challenge'];
    }

    /**
     * Sets old_battle_pass_challenge
     *
     * @param \SCILL\Model\BattlePassChallengeState $old_battle_pass_challenge old_battle_pass_challenge
     *
     * @return $this
     */
    public function setOldBattlePassChallenge($old_battle_pass_challenge)
    {
        $this->container['old_battle_pass_challenge'] = $old_battle_pass_challenge;

        return $this;
    }

    /**
     * Gets new_battle_pass_challenge
     *
     * @return \SCILL\Model\BattlePassChallengeState
     */
    public function getNewBattlePassChallenge()
    {
        return $this->container['new_battle_pass_challenge'];
    }

    /**
     * Sets new_battle_pass_challenge
     *
     * @param \SCILL\Model\BattlePassChallengeState $new_battle_pass_challenge new_battle_pass_challenge
     *
     * @return $this
     */
    public function setNewBattlePassChallenge($new_battle_pass_challenge)
    {
        $this->container['new_battle_pass_challenge'] = $new_battle_pass_challenge;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
