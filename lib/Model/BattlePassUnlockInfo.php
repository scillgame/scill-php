<?php
/**
 * BattlePassUnlockInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  SCILL
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.24
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SCILL\Model;

use \ArrayAccess;
use \SCILL\ObjectSerializer;

/**
 * BattlePassUnlockInfo Class Doc Comment
 *
 * @category Class
 * @package  SCILL
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BattlePassUnlockInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BattlePassUnlockInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'purchase_id' => 'string',
'battle_pass_id' => 'string',
'user_id' => 'string',
'purchase_price' => 'float',
'purchase_currency' => 'string',
'purchased_at' => 'string',
'battle_pass_completed' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'purchase_id' => null,
'battle_pass_id' => null,
'user_id' => null,
'purchase_price' => null,
'purchase_currency' => null,
'purchased_at' => null,
'battle_pass_completed' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'purchase_id' => 'purchase_id',
'battle_pass_id' => 'battle_pass_id',
'user_id' => 'user_id',
'purchase_price' => 'purchase_price',
'purchase_currency' => 'purchase_currency',
'purchased_at' => 'purchased_at',
'battle_pass_completed' => 'battle_pass_completed'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'purchase_id' => 'setPurchaseId',
'battle_pass_id' => 'setBattlePassId',
'user_id' => 'setUserId',
'purchase_price' => 'setPurchasePrice',
'purchase_currency' => 'setPurchaseCurrency',
'purchased_at' => 'setPurchasedAt',
'battle_pass_completed' => 'setBattlePassCompleted'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'purchase_id' => 'getPurchaseId',
'battle_pass_id' => 'getBattlePassId',
'user_id' => 'getUserId',
'purchase_price' => 'getPurchasePrice',
'purchase_currency' => 'getPurchaseCurrency',
'purchased_at' => 'getPurchasedAt',
'battle_pass_completed' => 'getBattlePassCompleted'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['purchase_id'] = isset($data['purchase_id']) ? $data['purchase_id'] : null;
        $this->container['battle_pass_id'] = isset($data['battle_pass_id']) ? $data['battle_pass_id'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['purchase_price'] = isset($data['purchase_price']) ? $data['purchase_price'] : null;
        $this->container['purchase_currency'] = isset($data['purchase_currency']) ? $data['purchase_currency'] : null;
        $this->container['purchased_at'] = isset($data['purchased_at']) ? $data['purchased_at'] : null;
        $this->container['battle_pass_completed'] = isset($data['battle_pass_completed']) ? $data['battle_pass_completed'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets purchase_id
     *
     * @return string
     */
    public function getPurchaseId()
    {
        return $this->container['purchase_id'];
    }

    /**
     * Sets purchase_id
     *
     * @param string $purchase_id The id of this battle pass purchase
     *
     * @return $this
     */
    public function setPurchaseId($purchase_id)
    {
        $this->container['purchase_id'] = $purchase_id;

        return $this;
    }

    /**
     * Gets battle_pass_id
     *
     * @return string
     */
    public function getBattlePassId()
    {
        return $this->container['battle_pass_id'];
    }

    /**
     * Sets battle_pass_id
     *
     * @param string $battle_pass_id The battle pass id
     *
     * @return $this
     */
    public function setBattlePassId($battle_pass_id)
    {
        $this->container['battle_pass_id'] = $battle_pass_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id The user id of this battle pass purchase
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets purchase_price
     *
     * @return float
     */
    public function getPurchasePrice()
    {
        return $this->container['purchase_price'];
    }

    /**
     * Sets purchase_price
     *
     * @param float $purchase_price The price paid for this battle pass
     *
     * @return $this
     */
    public function setPurchasePrice($purchase_price)
    {
        $this->container['purchase_price'] = $purchase_price;

        return $this;
    }

    /**
     * Gets purchase_currency
     *
     * @return string
     */
    public function getPurchaseCurrency()
    {
        return $this->container['purchase_currency'];
    }

    /**
     * Sets purchase_currency
     *
     * @param string $purchase_currency The currency used to purchase this battle pass
     *
     * @return $this
     */
    public function setPurchaseCurrency($purchase_currency)
    {
        $this->container['purchase_currency'] = $purchase_currency;

        return $this;
    }

    /**
     * Gets purchased_at
     *
     * @return string
     */
    public function getPurchasedAt()
    {
        return $this->container['purchased_at'];
    }

    /**
     * Sets purchased_at
     *
     * @param string $purchased_at The date this battle pass has been purchased
     *
     * @return $this
     */
    public function setPurchasedAt($purchased_at)
    {
        $this->container['purchased_at'] = $purchased_at;

        return $this;
    }

    /**
     * Gets battle_pass_completed
     *
     * @return bool
     */
    public function getBattlePassCompleted()
    {
        return $this->container['battle_pass_completed'];
    }

    /**
     * Sets battle_pass_completed
     *
     * @param bool $battle_pass_completed Indicates if this battle pass has been completed
     *
     * @return $this
     */
    public function setBattlePassCompleted($battle_pass_completed)
    {
        $this->container['battle_pass_completed'] = $battle_pass_completed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
