<?php
/**
 * EventMetaData
 *
 * PHP version 5
 *
 * @category Class
 * @package  SCILL
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SCILL API
 *
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.21
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SCILL\Model;

use \ArrayAccess;
use \SCILL\ObjectSerializer;

/**
 * EventMetaData Class Doc Comment
 *
 * @category Class
 * @description This holds metadata and is specific to each event type. Please have a look at the documentation to learn which properties need to be set for the event-type you want to send.
 * @package  SCILL
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EventMetaData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EventMetaData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'action_object' => 'string',
'action_subject' => 'string',
'action_type' => 'string',
'ammo_used' => 'int',
'amount' => 'int',
'amount_gained' => 'int',
'amount_given' => 'int',
'animal_name' => 'string',
'armor' => 'int',
'away_team_id' => 'string',
'away_score' => 'int',
'battle_status' => 'int',
'bounty_name' => 'string',
'building_id' => 'string',
'building_level' => 'int',
'card_type' => 'string',
'character_name' => 'string',
'checkpoint_id' => 'string',
'coordinate_x' => 'int',
'coordinate_y' => 'int',
'crew_name' => 'string',
'damage_amount' => 'int',
'distance' => 'int',
'duration' => 'int',
'effect_id' => 'string',
'enemy_character' => 'string',
'enemy_type' => 'string',
'event_type' => 'string',
'fuel_consumed' => 'int',
'health' => 'int',
'hit_type' => 'string',
'home_team_id' => 'string',
'home_score' => 'int',
'item_id' => 'string',
'item_name' => 'string',
'item_type' => 'string',
'kill_type' => 'string',
'lap_position' => 'int',
'level_id' => 'string',
'map_name' => 'string',
'map_section_name' => 'string',
'mission_id' => 'string',
'player_character' => 'string',
'puzzle_id' => 'int',
'race_position' => 'int',
'realm' => 'string',
'required_time' => 'int',
'resource_gained' => 'string',
'resource_given' => 'string',
'resource_name' => 'string',
'round_id' => 'int',
'round_type' => 'string',
'score' => 'int',
'stat_type' => 'string',
'time_condition' => 'string',
'transport_id' => 'string',
'type' => 'string',
'unit_type' => 'string',
'upgrade_type' => 'string',
'weapon_action' => 'string',
'weapon_id' => 'string',
'weapon_type' => 'string',
'weapon_used' => 'string',
'zone_name' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'action_object' => null,
'action_subject' => null,
'action_type' => null,
'ammo_used' => null,
'amount' => null,
'amount_gained' => null,
'amount_given' => null,
'animal_name' => null,
'armor' => null,
'away_team_id' => null,
'away_score' => null,
'battle_status' => null,
'bounty_name' => null,
'building_id' => null,
'building_level' => null,
'card_type' => null,
'character_name' => null,
'checkpoint_id' => null,
'coordinate_x' => null,
'coordinate_y' => null,
'crew_name' => null,
'damage_amount' => null,
'distance' => null,
'duration' => null,
'effect_id' => null,
'enemy_character' => null,
'enemy_type' => null,
'event_type' => null,
'fuel_consumed' => null,
'health' => null,
'hit_type' => null,
'home_team_id' => null,
'home_score' => null,
'item_id' => null,
'item_name' => null,
'item_type' => null,
'kill_type' => null,
'lap_position' => null,
'level_id' => null,
'map_name' => null,
'map_section_name' => null,
'mission_id' => null,
'player_character' => null,
'puzzle_id' => null,
'race_position' => null,
'realm' => null,
'required_time' => null,
'resource_gained' => null,
'resource_given' => null,
'resource_name' => null,
'round_id' => null,
'round_type' => null,
'score' => null,
'stat_type' => null,
'time_condition' => null,
'transport_id' => null,
'type' => null,
'unit_type' => null,
'upgrade_type' => null,
'weapon_action' => null,
'weapon_id' => null,
'weapon_type' => null,
'weapon_used' => null,
'zone_name' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'action_object' => 'action_object',
'action_subject' => 'action_subject',
'action_type' => 'action_type',
'ammo_used' => 'ammo_used',
'amount' => 'amount',
'amount_gained' => 'amount_gained',
'amount_given' => 'amount_given',
'animal_name' => 'animal_name',
'armor' => 'armor',
'away_team_id' => 'away_team_id',
'away_score' => 'away_score',
'battle_status' => 'battle_status',
'bounty_name' => 'bounty_name',
'building_id' => 'building_id',
'building_level' => 'building_level',
'card_type' => 'card_type',
'character_name' => 'character_name',
'checkpoint_id' => 'checkpoint_id',
'coordinate_x' => 'coordinate_x',
'coordinate_y' => 'coordinate_y',
'crew_name' => 'crew_name',
'damage_amount' => 'damage_amount',
'distance' => 'distance',
'duration' => 'duration',
'effect_id' => 'effect_id',
'enemy_character' => 'enemy_character',
'enemy_type' => 'enemy_type',
'event_type' => 'event_type',
'fuel_consumed' => 'fuel_consumed',
'health' => 'health',
'hit_type' => 'hit_type',
'home_team_id' => 'home_team_id',
'home_score' => 'home_score',
'item_id' => 'item_id',
'item_name' => 'item_name',
'item_type' => 'item_type',
'kill_type' => 'kill_type',
'lap_position' => 'lap_position',
'level_id' => 'level_id',
'map_name' => 'map_name',
'map_section_name' => 'map_section_name',
'mission_id' => 'mission_id',
'player_character' => 'player_character',
'puzzle_id' => 'puzzle_id',
'race_position' => 'race_position',
'realm' => 'realm',
'required_time' => 'required_time',
'resource_gained' => 'resource_gained',
'resource_given' => 'resource_given',
'resource_name' => 'resource_name',
'round_id' => 'round_id',
'round_type' => 'round_type',
'score' => 'score',
'stat_type' => 'stat_type',
'time_condition' => 'time_condition',
'transport_id' => 'transport_id',
'type' => 'type',
'unit_type' => 'unit_type',
'upgrade_type' => 'upgrade_type',
'weapon_action' => 'weapon_action',
'weapon_id' => 'weapon_id',
'weapon_type' => 'weapon_type',
'weapon_used' => 'weapon_used',
'zone_name' => 'zone_name'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'action_object' => 'setActionObject',
'action_subject' => 'setActionSubject',
'action_type' => 'setActionType',
'ammo_used' => 'setAmmoUsed',
'amount' => 'setAmount',
'amount_gained' => 'setAmountGained',
'amount_given' => 'setAmountGiven',
'animal_name' => 'setAnimalName',
'armor' => 'setArmor',
'away_team_id' => 'setAwayTeamId',
'away_score' => 'setAwayScore',
'battle_status' => 'setBattleStatus',
'bounty_name' => 'setBountyName',
'building_id' => 'setBuildingId',
'building_level' => 'setBuildingLevel',
'card_type' => 'setCardType',
'character_name' => 'setCharacterName',
'checkpoint_id' => 'setCheckpointId',
'coordinate_x' => 'setCoordinateX',
'coordinate_y' => 'setCoordinateY',
'crew_name' => 'setCrewName',
'damage_amount' => 'setDamageAmount',
'distance' => 'setDistance',
'duration' => 'setDuration',
'effect_id' => 'setEffectId',
'enemy_character' => 'setEnemyCharacter',
'enemy_type' => 'setEnemyType',
'event_type' => 'setEventType',
'fuel_consumed' => 'setFuelConsumed',
'health' => 'setHealth',
'hit_type' => 'setHitType',
'home_team_id' => 'setHomeTeamId',
'home_score' => 'setHomeScore',
'item_id' => 'setItemId',
'item_name' => 'setItemName',
'item_type' => 'setItemType',
'kill_type' => 'setKillType',
'lap_position' => 'setLapPosition',
'level_id' => 'setLevelId',
'map_name' => 'setMapName',
'map_section_name' => 'setMapSectionName',
'mission_id' => 'setMissionId',
'player_character' => 'setPlayerCharacter',
'puzzle_id' => 'setPuzzleId',
'race_position' => 'setRacePosition',
'realm' => 'setRealm',
'required_time' => 'setRequiredTime',
'resource_gained' => 'setResourceGained',
'resource_given' => 'setResourceGiven',
'resource_name' => 'setResourceName',
'round_id' => 'setRoundId',
'round_type' => 'setRoundType',
'score' => 'setScore',
'stat_type' => 'setStatType',
'time_condition' => 'setTimeCondition',
'transport_id' => 'setTransportId',
'type' => 'setType',
'unit_type' => 'setUnitType',
'upgrade_type' => 'setUpgradeType',
'weapon_action' => 'setWeaponAction',
'weapon_id' => 'setWeaponId',
'weapon_type' => 'setWeaponType',
'weapon_used' => 'setWeaponUsed',
'zone_name' => 'setZoneName'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'action_object' => 'getActionObject',
'action_subject' => 'getActionSubject',
'action_type' => 'getActionType',
'ammo_used' => 'getAmmoUsed',
'amount' => 'getAmount',
'amount_gained' => 'getAmountGained',
'amount_given' => 'getAmountGiven',
'animal_name' => 'getAnimalName',
'armor' => 'getArmor',
'away_team_id' => 'getAwayTeamId',
'away_score' => 'getAwayScore',
'battle_status' => 'getBattleStatus',
'bounty_name' => 'getBountyName',
'building_id' => 'getBuildingId',
'building_level' => 'getBuildingLevel',
'card_type' => 'getCardType',
'character_name' => 'getCharacterName',
'checkpoint_id' => 'getCheckpointId',
'coordinate_x' => 'getCoordinateX',
'coordinate_y' => 'getCoordinateY',
'crew_name' => 'getCrewName',
'damage_amount' => 'getDamageAmount',
'distance' => 'getDistance',
'duration' => 'getDuration',
'effect_id' => 'getEffectId',
'enemy_character' => 'getEnemyCharacter',
'enemy_type' => 'getEnemyType',
'event_type' => 'getEventType',
'fuel_consumed' => 'getFuelConsumed',
'health' => 'getHealth',
'hit_type' => 'getHitType',
'home_team_id' => 'getHomeTeamId',
'home_score' => 'getHomeScore',
'item_id' => 'getItemId',
'item_name' => 'getItemName',
'item_type' => 'getItemType',
'kill_type' => 'getKillType',
'lap_position' => 'getLapPosition',
'level_id' => 'getLevelId',
'map_name' => 'getMapName',
'map_section_name' => 'getMapSectionName',
'mission_id' => 'getMissionId',
'player_character' => 'getPlayerCharacter',
'puzzle_id' => 'getPuzzleId',
'race_position' => 'getRacePosition',
'realm' => 'getRealm',
'required_time' => 'getRequiredTime',
'resource_gained' => 'getResourceGained',
'resource_given' => 'getResourceGiven',
'resource_name' => 'getResourceName',
'round_id' => 'getRoundId',
'round_type' => 'getRoundType',
'score' => 'getScore',
'stat_type' => 'getStatType',
'time_condition' => 'getTimeCondition',
'transport_id' => 'getTransportId',
'type' => 'getType',
'unit_type' => 'getUnitType',
'upgrade_type' => 'getUpgradeType',
'weapon_action' => 'getWeaponAction',
'weapon_id' => 'getWeaponId',
'weapon_type' => 'getWeaponType',
'weapon_used' => 'getWeaponUsed',
'zone_name' => 'getZoneName'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['action_object'] = isset($data['action_object']) ? $data['action_object'] : null;
        $this->container['action_subject'] = isset($data['action_subject']) ? $data['action_subject'] : null;
        $this->container['action_type'] = isset($data['action_type']) ? $data['action_type'] : null;
        $this->container['ammo_used'] = isset($data['ammo_used']) ? $data['ammo_used'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['amount_gained'] = isset($data['amount_gained']) ? $data['amount_gained'] : null;
        $this->container['amount_given'] = isset($data['amount_given']) ? $data['amount_given'] : null;
        $this->container['animal_name'] = isset($data['animal_name']) ? $data['animal_name'] : null;
        $this->container['armor'] = isset($data['armor']) ? $data['armor'] : null;
        $this->container['away_team_id'] = isset($data['away_team_id']) ? $data['away_team_id'] : null;
        $this->container['away_score'] = isset($data['away_score']) ? $data['away_score'] : null;
        $this->container['battle_status'] = isset($data['battle_status']) ? $data['battle_status'] : null;
        $this->container['bounty_name'] = isset($data['bounty_name']) ? $data['bounty_name'] : null;
        $this->container['building_id'] = isset($data['building_id']) ? $data['building_id'] : null;
        $this->container['building_level'] = isset($data['building_level']) ? $data['building_level'] : null;
        $this->container['card_type'] = isset($data['card_type']) ? $data['card_type'] : null;
        $this->container['character_name'] = isset($data['character_name']) ? $data['character_name'] : null;
        $this->container['checkpoint_id'] = isset($data['checkpoint_id']) ? $data['checkpoint_id'] : null;
        $this->container['coordinate_x'] = isset($data['coordinate_x']) ? $data['coordinate_x'] : null;
        $this->container['coordinate_y'] = isset($data['coordinate_y']) ? $data['coordinate_y'] : null;
        $this->container['crew_name'] = isset($data['crew_name']) ? $data['crew_name'] : null;
        $this->container['damage_amount'] = isset($data['damage_amount']) ? $data['damage_amount'] : null;
        $this->container['distance'] = isset($data['distance']) ? $data['distance'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['effect_id'] = isset($data['effect_id']) ? $data['effect_id'] : null;
        $this->container['enemy_character'] = isset($data['enemy_character']) ? $data['enemy_character'] : null;
        $this->container['enemy_type'] = isset($data['enemy_type']) ? $data['enemy_type'] : null;
        $this->container['event_type'] = isset($data['event_type']) ? $data['event_type'] : null;
        $this->container['fuel_consumed'] = isset($data['fuel_consumed']) ? $data['fuel_consumed'] : null;
        $this->container['health'] = isset($data['health']) ? $data['health'] : null;
        $this->container['hit_type'] = isset($data['hit_type']) ? $data['hit_type'] : null;
        $this->container['home_team_id'] = isset($data['home_team_id']) ? $data['home_team_id'] : null;
        $this->container['home_score'] = isset($data['home_score']) ? $data['home_score'] : null;
        $this->container['item_id'] = isset($data['item_id']) ? $data['item_id'] : null;
        $this->container['item_name'] = isset($data['item_name']) ? $data['item_name'] : null;
        $this->container['item_type'] = isset($data['item_type']) ? $data['item_type'] : null;
        $this->container['kill_type'] = isset($data['kill_type']) ? $data['kill_type'] : null;
        $this->container['lap_position'] = isset($data['lap_position']) ? $data['lap_position'] : null;
        $this->container['level_id'] = isset($data['level_id']) ? $data['level_id'] : null;
        $this->container['map_name'] = isset($data['map_name']) ? $data['map_name'] : null;
        $this->container['map_section_name'] = isset($data['map_section_name']) ? $data['map_section_name'] : null;
        $this->container['mission_id'] = isset($data['mission_id']) ? $data['mission_id'] : null;
        $this->container['player_character'] = isset($data['player_character']) ? $data['player_character'] : null;
        $this->container['puzzle_id'] = isset($data['puzzle_id']) ? $data['puzzle_id'] : null;
        $this->container['race_position'] = isset($data['race_position']) ? $data['race_position'] : null;
        $this->container['realm'] = isset($data['realm']) ? $data['realm'] : null;
        $this->container['required_time'] = isset($data['required_time']) ? $data['required_time'] : null;
        $this->container['resource_gained'] = isset($data['resource_gained']) ? $data['resource_gained'] : null;
        $this->container['resource_given'] = isset($data['resource_given']) ? $data['resource_given'] : null;
        $this->container['resource_name'] = isset($data['resource_name']) ? $data['resource_name'] : null;
        $this->container['round_id'] = isset($data['round_id']) ? $data['round_id'] : null;
        $this->container['round_type'] = isset($data['round_type']) ? $data['round_type'] : null;
        $this->container['score'] = isset($data['score']) ? $data['score'] : null;
        $this->container['stat_type'] = isset($data['stat_type']) ? $data['stat_type'] : null;
        $this->container['time_condition'] = isset($data['time_condition']) ? $data['time_condition'] : null;
        $this->container['transport_id'] = isset($data['transport_id']) ? $data['transport_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['unit_type'] = isset($data['unit_type']) ? $data['unit_type'] : null;
        $this->container['upgrade_type'] = isset($data['upgrade_type']) ? $data['upgrade_type'] : null;
        $this->container['weapon_action'] = isset($data['weapon_action']) ? $data['weapon_action'] : null;
        $this->container['weapon_id'] = isset($data['weapon_id']) ? $data['weapon_id'] : null;
        $this->container['weapon_type'] = isset($data['weapon_type']) ? $data['weapon_type'] : null;
        $this->container['weapon_used'] = isset($data['weapon_used']) ? $data['weapon_used'] : null;
        $this->container['zone_name'] = isset($data['zone_name']) ? $data['zone_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets action_object
     *
     * @return string
     */
    public function getActionObject()
    {
        return $this->container['action_object'];
    }

    /**
     * Sets action_object
     *
     * @param string $action_object The object that is the source of the action
     *
     * @return $this
     */
    public function setActionObject($action_object)
    {
        $this->container['action_object'] = $action_object;

        return $this;
    }

    /**
     * Gets action_subject
     *
     * @return string
     */
    public function getActionSubject()
    {
        return $this->container['action_subject'];
    }

    /**
     * Sets action_subject
     *
     * @param string $action_subject The object that is the target of the action
     *
     * @return $this
     */
    public function setActionSubject($action_subject)
    {
        $this->container['action_subject'] = $action_subject;

        return $this;
    }

    /**
     * Gets action_type
     *
     * @return string
     */
    public function getActionType()
    {
        return $this->container['action_type'];
    }

    /**
     * Sets action_type
     *
     * @param string $action_type The name of the action
     *
     * @return $this
     */
    public function setActionType($action_type)
    {
        $this->container['action_type'] = $action_type;

        return $this;
    }

    /**
     * Gets ammo_used
     *
     * @return int
     */
    public function getAmmoUsed()
    {
        return $this->container['ammo_used'];
    }

    /**
     * Sets ammo_used
     *
     * @param int $ammo_used Number of ammonition used
     *
     * @return $this
     */
    public function setAmmoUsed($ammo_used)
    {
        $this->container['ammo_used'] = $ammo_used;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount A general indicator for number of items (i.e. number of kills in kill-enemy event)
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amount_gained
     *
     * @return int
     */
    public function getAmountGained()
    {
        return $this->container['amount_gained'];
    }

    /**
     * Sets amount_gained
     *
     * @param int $amount_gained The number of ammonition gained
     *
     * @return $this
     */
    public function setAmountGained($amount_gained)
    {
        $this->container['amount_gained'] = $amount_gained;

        return $this;
    }

    /**
     * Gets amount_given
     *
     * @return int
     */
    public function getAmountGiven()
    {
        return $this->container['amount_given'];
    }

    /**
     * Sets amount_given
     *
     * @param int $amount_given The number of amminition given
     *
     * @return $this
     */
    public function setAmountGiven($amount_given)
    {
        $this->container['amount_given'] = $amount_given;

        return $this;
    }

    /**
     * Gets animal_name
     *
     * @return string
     */
    public function getAnimalName()
    {
        return $this->container['animal_name'];
    }

    /**
     * Sets animal_name
     *
     * @param string $animal_name The name of an animal
     *
     * @return $this
     */
    public function setAnimalName($animal_name)
    {
        $this->container['animal_name'] = $animal_name;

        return $this;
    }

    /**
     * Gets armor
     *
     * @return int
     */
    public function getArmor()
    {
        return $this->container['armor'];
    }

    /**
     * Sets armor
     *
     * @param int $armor The \"health\" state of the armor
     *
     * @return $this
     */
    public function setArmor($armor)
    {
        $this->container['armor'] = $armor;

        return $this;
    }

    /**
     * Gets away_team_id
     *
     * @return string
     */
    public function getAwayTeamId()
    {
        return $this->container['away_team_id'];
    }

    /**
     * Sets away_team_id
     *
     * @param string $away_team_id The id of the opponent team
     *
     * @return $this
     */
    public function setAwayTeamId($away_team_id)
    {
        $this->container['away_team_id'] = $away_team_id;

        return $this;
    }

    /**
     * Gets away_score
     *
     * @return int
     */
    public function getAwayScore()
    {
        return $this->container['away_score'];
    }

    /**
     * Sets away_score
     *
     * @param int $away_score The score of the opponent team
     *
     * @return $this
     */
    public function setAwayScore($away_score)
    {
        $this->container['away_score'] = $away_score;

        return $this;
    }

    /**
     * Gets battle_status
     *
     * @return int
     */
    public function getBattleStatus()
    {
        return $this->container['battle_status'];
    }

    /**
     * Sets battle_status
     *
     * @param int $battle_status An integer value indicating the battle status (map it to an enum for example in your code)
     *
     * @return $this
     */
    public function setBattleStatus($battle_status)
    {
        $this->container['battle_status'] = $battle_status;

        return $this;
    }

    /**
     * Gets bounty_name
     *
     * @return string
     */
    public function getBountyName()
    {
        return $this->container['bounty_name'];
    }

    /**
     * Sets bounty_name
     *
     * @param string $bounty_name The name of the bounty
     *
     * @return $this
     */
    public function setBountyName($bounty_name)
    {
        $this->container['bounty_name'] = $bounty_name;

        return $this;
    }

    /**
     * Gets building_id
     *
     * @return string
     */
    public function getBuildingId()
    {
        return $this->container['building_id'];
    }

    /**
     * Sets building_id
     *
     * @param string $building_id The id or name of a building
     *
     * @return $this
     */
    public function setBuildingId($building_id)
    {
        $this->container['building_id'] = $building_id;

        return $this;
    }

    /**
     * Gets building_level
     *
     * @return int
     */
    public function getBuildingLevel()
    {
        return $this->container['building_level'];
    }

    /**
     * Sets building_level
     *
     * @param int $building_level The level of the building
     *
     * @return $this
     */
    public function setBuildingLevel($building_level)
    {
        $this->container['building_level'] = $building_level;

        return $this;
    }

    /**
     * Gets card_type
     *
     * @return string
     */
    public function getCardType()
    {
        return $this->container['card_type'];
    }

    /**
     * Sets card_type
     *
     * @param string $card_type The name of the card
     *
     * @return $this
     */
    public function setCardType($card_type)
    {
        $this->container['card_type'] = $card_type;

        return $this;
    }

    /**
     * Gets character_name
     *
     * @return string
     */
    public function getCharacterName()
    {
        return $this->container['character_name'];
    }

    /**
     * Sets character_name
     *
     * @param string $character_name The name of a character
     *
     * @return $this
     */
    public function setCharacterName($character_name)
    {
        $this->container['character_name'] = $character_name;

        return $this;
    }

    /**
     * Gets checkpoint_id
     *
     * @return string
     */
    public function getCheckpointId()
    {
        return $this->container['checkpoint_id'];
    }

    /**
     * Sets checkpoint_id
     *
     * @param string $checkpoint_id The id/name of a checkpint
     *
     * @return $this
     */
    public function setCheckpointId($checkpoint_id)
    {
        $this->container['checkpoint_id'] = $checkpoint_id;

        return $this;
    }

    /**
     * Gets coordinate_x
     *
     * @return int
     */
    public function getCoordinateX()
    {
        return $this->container['coordinate_x'];
    }

    /**
     * Sets coordinate_x
     *
     * @param int $coordinate_x The x coordinate in your coordinate system, used for example to store position on a map
     *
     * @return $this
     */
    public function setCoordinateX($coordinate_x)
    {
        $this->container['coordinate_x'] = $coordinate_x;

        return $this;
    }

    /**
     * Gets coordinate_y
     *
     * @return int
     */
    public function getCoordinateY()
    {
        return $this->container['coordinate_y'];
    }

    /**
     * Sets coordinate_y
     *
     * @param int $coordinate_y The y coordinate in your coordinate system, used for example to store position on a map
     *
     * @return $this
     */
    public function setCoordinateY($coordinate_y)
    {
        $this->container['coordinate_y'] = $coordinate_y;

        return $this;
    }

    /**
     * Gets crew_name
     *
     * @return string
     */
    public function getCrewName()
    {
        return $this->container['crew_name'];
    }

    /**
     * Sets crew_name
     *
     * @param string $crew_name The name of a crew
     *
     * @return $this
     */
    public function setCrewName($crew_name)
    {
        $this->container['crew_name'] = $crew_name;

        return $this;
    }

    /**
     * Gets damage_amount
     *
     * @return int
     */
    public function getDamageAmount()
    {
        return $this->container['damage_amount'];
    }

    /**
     * Sets damage_amount
     *
     * @param int $damage_amount The amount of damage
     *
     * @return $this
     */
    public function setDamageAmount($damage_amount)
    {
        $this->container['damage_amount'] = $damage_amount;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return int
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param int $distance The distance measured in any coordinate system of your choice. Please note: This is an integer field. If you need more precision multiple your floating point value with 1000 or so to keep the precision but storing it as an integer value
     *
     * @return $this
     */
    public function setDistance($distance)
    {
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int $duration The duration in any unit you like
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets effect_id
     *
     * @return string
     */
    public function getEffectId()
    {
        return $this->container['effect_id'];
    }

    /**
     * Sets effect_id
     *
     * @param string $effect_id The effect id or name
     *
     * @return $this
     */
    public function setEffectId($effect_id)
    {
        $this->container['effect_id'] = $effect_id;

        return $this;
    }

    /**
     * Gets enemy_character
     *
     * @return string
     */
    public function getEnemyCharacter()
    {
        return $this->container['enemy_character'];
    }

    /**
     * Sets enemy_character
     *
     * @param string $enemy_character The character type or name of an enemy
     *
     * @return $this
     */
    public function setEnemyCharacter($enemy_character)
    {
        $this->container['enemy_character'] = $enemy_character;

        return $this;
    }

    /**
     * Gets enemy_type
     *
     * @return string
     */
    public function getEnemyType()
    {
        return $this->container['enemy_type'];
    }

    /**
     * Sets enemy_type
     *
     * @param string $enemy_type The type of an enemy
     *
     * @return $this
     */
    public function setEnemyType($enemy_type)
    {
        $this->container['enemy_type'] = $enemy_type;

        return $this;
    }

    /**
     * Gets event_type
     *
     * @return string
     */
    public function getEventType()
    {
        return $this->container['event_type'];
    }

    /**
     * Sets event_type
     *
     * @param string $event_type The event type
     *
     * @return $this
     */
    public function setEventType($event_type)
    {
        $this->container['event_type'] = $event_type;

        return $this;
    }

    /**
     * Gets fuel_consumed
     *
     * @return int
     */
    public function getFuelConsumed()
    {
        return $this->container['fuel_consumed'];
    }

    /**
     * Sets fuel_consumed
     *
     * @param int $fuel_consumed The number of fuel consumed
     *
     * @return $this
     */
    public function setFuelConsumed($fuel_consumed)
    {
        $this->container['fuel_consumed'] = $fuel_consumed;

        return $this;
    }

    /**
     * Gets health
     *
     * @return int
     */
    public function getHealth()
    {
        return $this->container['health'];
    }

    /**
     * Sets health
     *
     * @param int $health The health
     *
     * @return $this
     */
    public function setHealth($health)
    {
        $this->container['health'] = $health;

        return $this;
    }

    /**
     * Gets hit_type
     *
     * @return string
     */
    public function getHitType()
    {
        return $this->container['hit_type'];
    }

    /**
     * Sets hit_type
     *
     * @param string $hit_type The type of a hit (i.e. head, torso, leg)
     *
     * @return $this
     */
    public function setHitType($hit_type)
    {
        $this->container['hit_type'] = $hit_type;

        return $this;
    }

    /**
     * Gets home_team_id
     *
     * @return string
     */
    public function getHomeTeamId()
    {
        return $this->container['home_team_id'];
    }

    /**
     * Sets home_team_id
     *
     * @param string $home_team_id The id or name of your or the home team
     *
     * @return $this
     */
    public function setHomeTeamId($home_team_id)
    {
        $this->container['home_team_id'] = $home_team_id;

        return $this;
    }

    /**
     * Gets home_score
     *
     * @return int
     */
    public function getHomeScore()
    {
        return $this->container['home_score'];
    }

    /**
     * Sets home_score
     *
     * @param int $home_score The score of your or the home team
     *
     * @return $this
     */
    public function setHomeScore($home_score)
    {
        $this->container['home_score'] = $home_score;

        return $this;
    }

    /**
     * Gets item_id
     *
     * @return string
     */
    public function getItemId()
    {
        return $this->container['item_id'];
    }

    /**
     * Sets item_id
     *
     * @param string $item_id The id of an item
     *
     * @return $this
     */
    public function setItemId($item_id)
    {
        $this->container['item_id'] = $item_id;

        return $this;
    }

    /**
     * Gets item_name
     *
     * @return string
     */
    public function getItemName()
    {
        return $this->container['item_name'];
    }

    /**
     * Sets item_name
     *
     * @param string $item_name The name of an item
     *
     * @return $this
     */
    public function setItemName($item_name)
    {
        $this->container['item_name'] = $item_name;

        return $this;
    }

    /**
     * Gets item_type
     *
     * @return string
     */
    public function getItemType()
    {
        return $this->container['item_type'];
    }

    /**
     * Sets item_type
     *
     * @param string $item_type The type of an item
     *
     * @return $this
     */
    public function setItemType($item_type)
    {
        $this->container['item_type'] = $item_type;

        return $this;
    }

    /**
     * Gets kill_type
     *
     * @return string
     */
    public function getKillType()
    {
        return $this->container['kill_type'];
    }

    /**
     * Sets kill_type
     *
     * @param string $kill_type The type of a kill
     *
     * @return $this
     */
    public function setKillType($kill_type)
    {
        $this->container['kill_type'] = $kill_type;

        return $this;
    }

    /**
     * Gets lap_position
     *
     * @return int
     */
    public function getLapPosition()
    {
        return $this->container['lap_position'];
    }

    /**
     * Sets lap_position
     *
     * @param int $lap_position The position in a lap
     *
     * @return $this
     */
    public function setLapPosition($lap_position)
    {
        $this->container['lap_position'] = $lap_position;

        return $this;
    }

    /**
     * Gets level_id
     *
     * @return string
     */
    public function getLevelId()
    {
        return $this->container['level_id'];
    }

    /**
     * Sets level_id
     *
     * @param string $level_id The id of the level
     *
     * @return $this
     */
    public function setLevelId($level_id)
    {
        $this->container['level_id'] = $level_id;

        return $this;
    }

    /**
     * Gets map_name
     *
     * @return string
     */
    public function getMapName()
    {
        return $this->container['map_name'];
    }

    /**
     * Sets map_name
     *
     * @param string $map_name The name of a map
     *
     * @return $this
     */
    public function setMapName($map_name)
    {
        $this->container['map_name'] = $map_name;

        return $this;
    }

    /**
     * Gets map_section_name
     *
     * @return string
     */
    public function getMapSectionName()
    {
        return $this->container['map_section_name'];
    }

    /**
     * Sets map_section_name
     *
     * @param string $map_section_name The name of a section of a map
     *
     * @return $this
     */
    public function setMapSectionName($map_section_name)
    {
        $this->container['map_section_name'] = $map_section_name;

        return $this;
    }

    /**
     * Gets mission_id
     *
     * @return string
     */
    public function getMissionId()
    {
        return $this->container['mission_id'];
    }

    /**
     * Sets mission_id
     *
     * @param string $mission_id The mission id
     *
     * @return $this
     */
    public function setMissionId($mission_id)
    {
        $this->container['mission_id'] = $mission_id;

        return $this;
    }

    /**
     * Gets player_character
     *
     * @return string
     */
    public function getPlayerCharacter()
    {
        return $this->container['player_character'];
    }

    /**
     * Sets player_character
     *
     * @param string $player_character The name of the player character
     *
     * @return $this
     */
    public function setPlayerCharacter($player_character)
    {
        $this->container['player_character'] = $player_character;

        return $this;
    }

    /**
     * Gets puzzle_id
     *
     * @return int
     */
    public function getPuzzleId()
    {
        return $this->container['puzzle_id'];
    }

    /**
     * Sets puzzle_id
     *
     * @param int $puzzle_id The id of a puzzle
     *
     * @return $this
     */
    public function setPuzzleId($puzzle_id)
    {
        $this->container['puzzle_id'] = $puzzle_id;

        return $this;
    }

    /**
     * Gets race_position
     *
     * @return int
     */
    public function getRacePosition()
    {
        return $this->container['race_position'];
    }

    /**
     * Sets race_position
     *
     * @param int $race_position The position within a race
     *
     * @return $this
     */
    public function setRacePosition($race_position)
    {
        $this->container['race_position'] = $race_position;

        return $this;
    }

    /**
     * Gets realm
     *
     * @return string
     */
    public function getRealm()
    {
        return $this->container['realm'];
    }

    /**
     * Sets realm
     *
     * @param string $realm The realm
     *
     * @return $this
     */
    public function setRealm($realm)
    {
        $this->container['realm'] = $realm;

        return $this;
    }

    /**
     * Gets required_time
     *
     * @return int
     */
    public function getRequiredTime()
    {
        return $this->container['required_time'];
    }

    /**
     * Sets required_time
     *
     * @param int $required_time The time required involed in this event. I.e. in a reach-checkpoint event this could be the time in seconds required to reach that checkpoint from the last checkpoint.
     *
     * @return $this
     */
    public function setRequiredTime($required_time)
    {
        $this->container['required_time'] = $required_time;

        return $this;
    }

    /**
     * Gets resource_gained
     *
     * @return string
     */
    public function getResourceGained()
    {
        return $this->container['resource_gained'];
    }

    /**
     * Sets resource_gained
     *
     * @param string $resource_gained The name/id of the resource gained
     *
     * @return $this
     */
    public function setResourceGained($resource_gained)
    {
        $this->container['resource_gained'] = $resource_gained;

        return $this;
    }

    /**
     * Gets resource_given
     *
     * @return string
     */
    public function getResourceGiven()
    {
        return $this->container['resource_given'];
    }

    /**
     * Sets resource_given
     *
     * @param string $resource_given The name/id of the resource given (to someone else)
     *
     * @return $this
     */
    public function setResourceGiven($resource_given)
    {
        $this->container['resource_given'] = $resource_given;

        return $this;
    }

    /**
     * Gets resource_name
     *
     * @return string
     */
    public function getResourceName()
    {
        return $this->container['resource_name'];
    }

    /**
     * Sets resource_name
     *
     * @param string $resource_name The name of the resource
     *
     * @return $this
     */
    public function setResourceName($resource_name)
    {
        $this->container['resource_name'] = $resource_name;

        return $this;
    }

    /**
     * Gets round_id
     *
     * @return int
     */
    public function getRoundId()
    {
        return $this->container['round_id'];
    }

    /**
     * Sets round_id
     *
     * @param int $round_id The id of the round
     *
     * @return $this
     */
    public function setRoundId($round_id)
    {
        $this->container['round_id'] = $round_id;

        return $this;
    }

    /**
     * Gets round_type
     *
     * @return string
     */
    public function getRoundType()
    {
        return $this->container['round_type'];
    }

    /**
     * Sets round_type
     *
     * @param string $round_type The type of the round
     *
     * @return $this
     */
    public function setRoundType($round_type)
    {
        $this->container['round_type'] = $round_type;

        return $this;
    }

    /**
     * Gets score
     *
     * @return int
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     *
     * @param int $score The score
     *
     * @return $this
     */
    public function setScore($score)
    {
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets stat_type
     *
     * @return string
     */
    public function getStatType()
    {
        return $this->container['stat_type'];
    }

    /**
     * Sets stat_type
     *
     * @param string $stat_type The type of the stats item
     *
     * @return $this
     */
    public function setStatType($stat_type)
    {
        $this->container['stat_type'] = $stat_type;

        return $this;
    }

    /**
     * Gets time_condition
     *
     * @return string
     */
    public function getTimeCondition()
    {
        return $this->container['time_condition'];
    }

    /**
     * Sets time_condition
     *
     * @param string $time_condition The timing condition
     *
     * @return $this
     */
    public function setTimeCondition($time_condition)
    {
        $this->container['time_condition'] = $time_condition;

        return $this;
    }

    /**
     * Gets transport_id
     *
     * @return string
     */
    public function getTransportId()
    {
        return $this->container['transport_id'];
    }

    /**
     * Sets transport_id
     *
     * @param string $transport_id The id of the transport
     *
     * @return $this
     */
    public function setTransportId($transport_id)
    {
        $this->container['transport_id'] = $transport_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The name/id of a type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets unit_type
     *
     * @return string
     */
    public function getUnitType()
    {
        return $this->container['unit_type'];
    }

    /**
     * Sets unit_type
     *
     * @param string $unit_type The name/id of a unit type
     *
     * @return $this
     */
    public function setUnitType($unit_type)
    {
        $this->container['unit_type'] = $unit_type;

        return $this;
    }

    /**
     * Gets upgrade_type
     *
     * @return string
     */
    public function getUpgradeType()
    {
        return $this->container['upgrade_type'];
    }

    /**
     * Sets upgrade_type
     *
     * @param string $upgrade_type The name of the upgrade
     *
     * @return $this
     */
    public function setUpgradeType($upgrade_type)
    {
        $this->container['upgrade_type'] = $upgrade_type;

        return $this;
    }

    /**
     * Gets weapon_action
     *
     * @return string
     */
    public function getWeaponAction()
    {
        return $this->container['weapon_action'];
    }

    /**
     * Sets weapon_action
     *
     * @param string $weapon_action The action taken on a weapon (i.e. infrared-activated)
     *
     * @return $this
     */
    public function setWeaponAction($weapon_action)
    {
        $this->container['weapon_action'] = $weapon_action;

        return $this;
    }

    /**
     * Gets weapon_id
     *
     * @return string
     */
    public function getWeaponId()
    {
        return $this->container['weapon_id'];
    }

    /**
     * Sets weapon_id
     *
     * @param string $weapon_id The id of the weapon
     *
     * @return $this
     */
    public function setWeaponId($weapon_id)
    {
        $this->container['weapon_id'] = $weapon_id;

        return $this;
    }

    /**
     * Gets weapon_type
     *
     * @return string
     */
    public function getWeaponType()
    {
        return $this->container['weapon_type'];
    }

    /**
     * Sets weapon_type
     *
     * @param string $weapon_type The type of the weapon
     *
     * @return $this
     */
    public function setWeaponType($weapon_type)
    {
        $this->container['weapon_type'] = $weapon_type;

        return $this;
    }

    /**
     * Gets weapon_used
     *
     * @return string
     */
    public function getWeaponUsed()
    {
        return $this->container['weapon_used'];
    }

    /**
     * Sets weapon_used
     *
     * @param string $weapon_used The name/id of a weapon used in a kill or similar event
     *
     * @return $this
     */
    public function setWeaponUsed($weapon_used)
    {
        $this->container['weapon_used'] = $weapon_used;

        return $this;
    }

    /**
     * Gets zone_name
     *
     * @return string
     */
    public function getZoneName()
    {
        return $this->container['zone_name'];
    }

    /**
     * Sets zone_name
     *
     * @param string $zone_name The name of the zone
     *
     * @return $this
     */
    public function setZoneName($zone_name)
    {
        $this->container['zone_name'] = $zone_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
